// Copyright Zero Games. All Rights Reserved.

#pragma warning disable RS1035 // Do not use banned APIs for analyzers

using System.Reflection;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

namespace ZeroGames.ZSharp.Emit.SourceGenerator;

public class UClassSyntaxWalker : CSharpSyntaxWalker
{

	public override void VisitClassDeclaration(ClassDeclarationSyntax node)
	{
		if (node.AttributeLists.Any(al => al.Attributes.Any(a => a.Name.ToString() == "UClass" || a.Name.ToString() == "UClassAttribute")))
		{
			_uclassDeclarations.Add(node);
		}
	}
	
	public IReadOnlyList<ClassDeclarationSyntax> UClassDeclarations => _uclassDeclarations;

	private List<ClassDeclarationSyntax> _uclassDeclarations = new();

}

public class UClassSyntaxReceiver : ISyntaxContextReceiver
{
	
	public void OnVisitSyntaxNode(GeneratorSyntaxContext context)
	{
		if (context.Node is ClassDeclarationSyntax { AttributeLists.Count: > 0 } classDeclarationSyntax)
		{
			var typeSymbol = context.SemanticModel.GetDeclaredSymbol(classDeclarationSyntax) as ITypeSymbol;
			if (typeSymbol?.GetAttributes().Any(attr => attr.AttributeClass?.ToDisplayString() == "ZeroGames.ZSharp.Emit.Specifier.UClassAttribute") ?? false)
			{
				if (!_uclassSymbols.Contains(typeSymbol))
				{
					_uclassSymbols.Add(typeSymbol);
				}
			}
		}
	}
	
	public IReadOnlyList<ITypeSymbol> UClassSymbols => _uclassSymbols;

	private List<ITypeSymbol> _uclassSymbols = new();
	
}

[Generator]
public class UClassGenerator : ISourceGenerator
{

	public void Initialize(GeneratorInitializationContext context)
	{
		context.RegisterForSyntaxNotifications(() => new UClassSyntaxReceiver());
	}

	public void Execute(GeneratorExecutionContext context)
	{
		if (context.SyntaxContextReceiver is not UClassSyntaxReceiver receiver)
		{
			return;
		}
		
		foreach (var uclassSymbol in receiver.UClassSymbols)
		{
			GenerateUClass(uclassSymbol, context);
		}
	}

	private void GenerateUClass(ITypeSymbol uclassSymbol, GeneratorExecutionContext context)
	{
		INamedTypeSymbol ufunctionSpecifierSymbol = context.Compilation.GetTypeByMetadataName("ZeroGames.ZSharp.Emit.Specifier.UFunctionAttribute")!;
		
		// Wait for C# 13.
		// INamedTypeSymbol upropertySymbol = context.Compilation.GetTypeByMetadataName("ZeroGames.ZSharp.Emit.Specifier.UPropertyAttribute")!;

		string className = uclassSymbol.Name;
		
		List<string> namespaces = new();
		INamespaceSymbol? curNamespace = uclassSymbol.ContainingNamespace;
		while (curNamespace is not null)
		{
			if (string.IsNullOrWhiteSpace(curNamespace.Name))
			{
				break;
			}
			
			namespaces.Add(curNamespace.Name);
			curNamespace = curNamespace.ContainingNamespace;
		}

		namespaces.Reverse();
		string namespaceName = string.Join(".", namespaces);
		
		string unrealFieldPath = $"/Script/{uclassSymbol.ContainingNamespace.Name}.{className}";
		
		var events = uclassSymbol.GetMembers()
			.OfType<IMethodSymbol>()
			.Where(method =>
			{
				return method.GetAttributes()
					.Any(attr =>
					{
						INamedTypeSymbol? currentClass = attr.AttributeClass;
						if (currentClass?.ToDisplayString() == "ZeroGames.ZSharp.Emit.Specifier.BlueprintEventOverrideAttribute")
						{
							return false;
						}
						
						while (currentClass is not null)
						{
							if (currentClass.ToDisplayString() == "ZeroGames.ZSharp.Emit.Specifier.EventSpecifierBase")
							{
								return true;
							}

							currentClass = currentClass.BaseType;
						}

						return false;
					});
			});

		List<string> eventThunks = new();
		foreach (var ufunctionSymbol in events)
		{
			eventThunks.Add(Indent(GetEventThunk(ufunctionSymbol)));
		}

		string functions = string.Join("\n\n", eventThunks);
		
		string code = 
@$"// Copyright Zero Games. All Rights Reserved.

// THIS FILE IS GENERATED BY ZSHARP.
// DO NOT MODIFY DIRECTLY!

#region GENERATED CODE

using ZeroGames.ZSharp.Core;
using ZeroGames.ZSharp.Core.UnrealEngine;
using ZeroGames.ZSharp.Core.UnrealEngine.Specifier;
using ZeroGames.ZSharp.Emit;
using ZeroGames.ZSharp.UnrealEngine;
using ZeroGames.ZSharp.UnrealEngine.Core;
using ZeroGames.ZSharp.UnrealEngine.CoreUObject;
using ZeroGames.ZSharp.UnrealEngine.Engine;

namespace {namespaceName};

[System.CodeDom.Compiler.GeneratedCode(""ZSharp"", ""{Assembly.GetExecutingAssembly().GetName().Version.ToString(3)}"")]
[UnrealFieldPath(__UNREAL_FIELD_PATH)]
public partial class {className} : IConjugate<{className}>, IStaticUnrealFieldPath, IStaticClass
{{

	public new static {className} BuildConjugate(IntPtr unmanaged) => new(unmanaged);
	public new static string StaticUnrealFieldPath => __UNREAL_FIELD_PATH;
	public new static UnrealClass StaticClass => UnrealObjectGlobals.LowLevelFindObject<UnrealClass>(__UNREAL_FIELD_PATH)!;
	public override string UnrealFieldPath => __UNREAL_FIELD_PATH;
	protected {className}(IntPtr unmanaged) : base(unmanaged){{}}
	private const string __UNREAL_FIELD_PATH = ""{unrealFieldPath}"";

{functions}

}}

#endregion


";
		
		context.AddSource($"{className}.g.cs", SourceText.From(code, Encoding.UTF8));
	}

	private string GetEventThunk(IMethodSymbol ufunctionSymbol)
	{
		string GetRefOutModifier(RefKind refKind) => refKind switch
		{
			RefKind.Ref => "ref ",
			RefKind.Out => "out ",
			_ => string.Empty
		};
		
		Accessibility accessibility = ufunctionSymbol.DeclaredAccessibility;
		string visibility = accessibility == Accessibility.Public ? "public" : accessibility == Accessibility.Private ? "private" : "protected";
		string implVisibility = accessibility == Accessibility.Private ? "private" : "protected virtual";
		string name = ufunctionSymbol.Name;
		string parameterDeclarationList = string.Join(", ", ufunctionSymbol.Parameters.Select(p => $"{GetRefOutModifier(p.RefKind)}{p.Type.Name} {p.Name}"));
		string parameterList = string.Join(", ", ufunctionSymbol.Parameters.Select(p => p.RefKind == RefKind.Out ? $"typeof({p.Type.Name})" : p.Name));
		string returnType = ufunctionSymbol.ReturnsVoid ? "void" : ufunctionSymbol.ReturnType.Name;

		string callUnrealFunction = ufunctionSymbol.ReturnsVoid ? "CallUnrealFunction" : $"CallUnrealFunctionEx<{returnType}>";
		List<string> copyOuts = new();
		for (int32 i = 0; i < ufunctionSymbol.Parameters.Length; ++i)
		{
			var p = ufunctionSymbol.Parameters[i];
			if (p.RefKind != RefKind.Out)
			{
				continue;
			}

			string parameterNullForgiving = p.Type.Name.EndsWith("?") ? string.Empty : "!";
			copyOuts.Add($"{p.Name} = ({p.Type.Name})res[{i}].Object{parameterNullForgiving};");
		}
		string copyOut = string.Join("\n", copyOuts);
		if (!string.IsNullOrWhiteSpace(copyOut))
		{
			copyOut = Indent(copyOut);
			copyOut = $"\n{copyOut}\n";
		}
		string nullForgiving = returnType.EndsWith("?") ? string.Empty : "!";
		string returnValue = ufunctionSymbol.ReturnsVoid ? string.Empty : $" ({returnType})res[-1].Object{nullForgiving}";
		
		string validate = string.Empty;
		if (ufunctionSymbol.GetAttributes().Any(attr => attr.AttributeClass?.ToDisplayString() == "ZeroGames.ZSharp.Emit.Specifier.WithValidationAttribute"))
		{
			validate = $"\n{implVisibility} partial bool {name}_Validate({parameterDeclarationList});";
		}
		
		string code =
@$"[ZCall]
{implVisibility} partial {returnType} {name}_Implementation({parameterDeclarationList});{validate}
{visibility} partial {returnType} {name}({parameterDeclarationList})
{{
	DynamicZCallResult res = {callUnrealFunction}(nameof({name}), [ {parameterList} ]);
{copyOut}
	return{returnValue};
}}";
		
		return code;
	}
	
	private static string Indent(string str, int32 count = 1, string indentUnit = "\t")
	{
		StringBuilder unitSb = new();
		for (int32 i = 0; i < count; ++i)
		{
			unitSb.Append(indentUnit);
		}

		string indent = unitSb.ToString();
		string newlineindent = '\n' + indent;

		return str.Insert(0, indent).Replace("\n", newlineindent);
	}
	
}


