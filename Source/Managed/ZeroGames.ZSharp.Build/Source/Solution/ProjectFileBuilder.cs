// Copyright Zero Games. All Rights Reserved.

using System.Text;
using System.Xml;

namespace ZeroGames.ZSharp.Build.Solution;

public class ProjectFileBuilder
{
	public ProjectFileBuilder(ProjectDefinition project, string unrealProjectDir, string zsharpPluginDir)
	{
		_project = project;
		_unrealProjectDir = unrealProjectDir;
		_zsharpPluginDir = zsharpPluginDir;
	}

	public override string ToString()
	{
		XmlDocument doc = new();

		BuildHeader(doc);
		XmlElement projectNode = BuildProjectNode(doc);
		BuildPropertyGroupNode(doc, projectNode);
		BuildPropertyGroupByConfiguration("DebugGame", doc, projectNode);
		BuildPropertyGroupByConfiguration("DebugGame Editor", doc, projectNode);
		BuildPropertyGroupByConfiguration("Development", doc, projectNode);
		BuildPropertyGroupByConfiguration("Development Editor", doc, projectNode);
		BuildPropertyGroupByConfiguration("Shipping", doc, projectNode);
		BuildPropertyGroupByConfiguration("Shipping Editor", doc, projectNode);
		BuildItemGroupNode(doc, projectNode);
		BuildReferenceNode(doc, projectNode);
		BuildTargetNode(doc, projectNode);

		XmlWriterSettings xws = new()
		{
			Encoding = Encoding.UTF8,
			Indent = true,
			IndentChars = "\t",
			OmitXmlDeclaration = true,
			CloseOutput = false,
		};
		using MemoryStream ms = new MemoryStream();
		using XmlWriter xw = XmlWriter.Create(ms, xws);
		using StreamReader sr = new(ms, Encoding.UTF8);
		doc.Save(xw);
		ms.Position = 0;

		return sr.ReadToEnd();
	}

	private static void AppendSimpleChild(XmlDocument doc, XmlElement elem, string childName, string childInnerText)
	{
		XmlElement childNode = doc.CreateElement(childName);
		childNode.InnerText = childInnerText;
		elem.AppendChild(childNode);
	}

	private void BuildHeader(XmlDocument doc)
	{
		doc.AppendChild(doc.CreateComment("Copyright Zero Games. All Rights Reserved."));

		doc.AppendChild(doc.CreateComment("THIS FILE IS GENERATED BY ZSHARP."));
		doc.AppendChild(doc.CreateComment("DO NOT MODIFY DIRECTLY!"));
	}

	private XmlElement BuildProjectNode(XmlDocument doc)
	{
		XmlElement projectNode = doc.CreateElement("Project");
		projectNode.SetAttribute("Sdk", "Microsoft.NET.Sdk");
		doc.AppendChild(projectNode);

		return projectNode;
	}

	private XmlElement BuildPropertyGroupNode(XmlDocument doc, XmlElement projectNode)
	{
		XmlElement propertyGroupNode = doc.CreateElement("PropertyGroup");
		void Append(string childName, string childInnerText) => AppendSimpleChild(doc, propertyGroupNode, childName, childInnerText);
		Append("ProjectName", _project.Name);
		Append("TargetFramework", "net8.0");
		Append("ImplicitUsings", _project.ImplicitUsingEnabled ? "enable" : "disable");
		Append("Nullable", _project.Nullable ? "enable" : "disable");
		Append("AllowUnsafeBlocks", _project.UnsafeBlockEnabled.ToString().ToLower());
		Append("Authors", _project.Authors);
		Append("Company", _project.Company);
		Append("AssemblyVersion", _project.AssemblyVersion);
		Append("FileVersion", _project.FileVersion);
		Append("NeutralLanguage", _project.NeutralLanguage);

		List<string> finalWarningsToErros = [.._project.WarningsAsErrors];
		if (_project.StrongRestrictedNullable)
		{
			finalWarningsToErros.Add("CS8600;CS8601;CS8602;CS8603;CS8604;CS8609;CS8610;CS8614;CS8616;CS8618;CS8619;CS8622;CS8625");
		}

		finalWarningsToErros.Insert(0, "$(WarningsAsErrors)");
		Append("WarningsAsErrors", string.Join(';', finalWarningsToErros));
		Append("Configurations", "DebugGame;DebugGame Editor;Development;Development Editor;Shipping;Shipping Editor");
		Append("Platforms", "AnyCPU");
		Append("UnrealProjectDir", _unrealProjectDir);
		Append("ZSharpProjectDir", $"{_unrealProjectDir}/Intermediate/ZSharp/ProjectFiles");
		Append("ZSharpDir", _zsharpPluginDir);
		Append("SourceDir", _project.SourceDir);
		if (_project.HasGlue)
		{
			Append("GlueDir", $"{_unrealProjectDir}/Intermediate/ZSharp/Glue/{_project.Name}");
		}

		projectNode.AppendChild(propertyGroupNode);
		return propertyGroupNode;
	}

	private XmlElement BuildPropertyGroupByConfiguration(string config, XmlDocument doc, XmlElement projectNode)
	{
		XmlElement propertyGroupNode = doc.CreateElement("PropertyGroup");
		propertyGroupNode.SetAttribute("Condition", $" '$(Configuration)' == '{config}' ");
		void Append(string childName, string childInnerText) => AppendSimpleChild(doc, propertyGroupNode, childName, childInnerText);
		Append("Optimize", config switch
		{
			"DebugGame" or "DebugGame Editor" => "false",
			_ => "true"
		});
		Append("DebugSymbols", config switch
		{
			"Shipping" or "Shipping Editor" => "false",
			_ => "true"
		});
		Append("DebugType", config switch
		{
			"Shipping" or "Shipping Editor" => "none",
			_ => "embedded"
		});

		projectNode.AppendChild(propertyGroupNode);
		return propertyGroupNode;
	}

	private XmlElement BuildItemGroupNode(XmlDocument doc, XmlElement projectNode)
	{
		XmlElement itemGroupNode = doc.CreateElement("ItemGroup");

		List<string> finalUsings = [.._project.Usings];
		finalUsings.ForEach(us =>
		{
			XmlElement usingNode = doc.CreateElement("Using");
			usingNode.SetAttribute("Include", us);
			itemGroupNode.AppendChild(usingNode);
		});

		Dictionary<string, string> finalAliases = new(_project.Aliases)
		{
			{ "System.Byte", "uint8" },
			{ "System.UInt16", "uint16" },
			{ "System.UInt32", "uint32" },
			{ "System.UInt64", "uint64" },
			{ "System.SByte", "int8" },
			{ "System.Int16", "int16" },
			{ "System.Int32", "int32" },
			{ "System.Int64", "int64" },
		};

		foreach (var pair in finalAliases)
		{
			XmlElement aliasNode = doc.CreateElement("Using");
			aliasNode.SetAttribute("Include", pair.Key);
			aliasNode.SetAttribute("Alias", pair.Value);
			itemGroupNode.AppendChild(aliasNode);
		}

		projectNode.AppendChild(itemGroupNode);
		return itemGroupNode;
	}

	private XmlElement BuildReferenceNode(XmlDocument doc, XmlElement projectNode)
	{
		XmlElement itemGroupNode = doc.CreateElement("ItemGroup");

		List<string> finalProjectReferences = [.._project.ProjectReferences];
		foreach (var reference in finalProjectReferences)
		{
			XmlElement referenceNode = doc.CreateElement("ProjectReference");
			referenceNode.SetAttribute("Include", $"$(ZSharpProjectDir)/{reference}/{reference}.csproj");
			itemGroupNode.AppendChild(referenceNode);
		}

		List<string> finalReferences = [.._project.References];
		foreach (var reference in finalReferences)
		{
			throw new NotImplementedException();
		}
		
		XmlElement compileNode = doc.CreateElement("Compile");
		compileNode.SetAttribute("Include", "$(SourceDir)/**/*.cs");
		itemGroupNode.AppendChild(compileNode);
		
		XmlElement contentNode = doc.CreateElement("Content");
		contentNode.SetAttribute("Include", "$(SourceDir)/$(ProjectName).zsproj");
		XmlElement contentLinkNode = doc.CreateElement("Link");
		contentLinkNode.InnerText = $"{_project.Name}.zsproj";
		contentNode.AppendChild(contentLinkNode);
		itemGroupNode.AppendChild(contentNode);
		
		if (_project.HasGlue)
		{
			XmlElement glueNode = doc.CreateElement("Compile");
			glueNode.SetAttribute("Include", "$(GlueDir)/**/*.cs");
			itemGroupNode.AppendChild(glueNode);
		}

		projectNode.AppendChild(itemGroupNode);
		return itemGroupNode;
	}

	private XmlElement BuildTargetNode(XmlDocument doc, XmlElement projectNode)
	{
		XmlElement targetNode = doc.CreateElement("Target");
		targetNode.SetAttribute("Name", "PostBuild");
		targetNode.SetAttribute("AfterTargets", "PostBuildEvent");

		XmlElement mkdirNode = doc.CreateElement("Exec");
		string outputDir = "$(UnrealProjectDir)/Binaries/Managed";
		mkdirNode.SetAttribute("Command", $"if not exist \"{outputDir}\" mkdir \"{outputDir}\"");
		targetNode.AppendChild(mkdirNode);

		XmlElement copyNode = doc.CreateElement("Exec");
		copyNode.SetAttribute("Command", $"copy \"$(TargetPath)\" \"{outputDir}/$(TargetFileName)\"");
		targetNode.AppendChild(copyNode);

		projectNode.AppendChild(targetNode);
		return targetNode;
	}

	private ProjectDefinition _project;
	private string _unrealProjectDir;
	private string _zsharpPluginDir;
}


