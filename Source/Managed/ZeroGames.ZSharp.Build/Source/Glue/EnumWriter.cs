// Copyright Zero Games. All Rights Reserved.

using System.Reflection;
using System.Text;

namespace ZeroGames.ZSharp.Build.Glue;

public class EnumWriter : IDisposable, IAsyncDisposable
{

	public EnumWriter(ExportedEnum exportedEnum, Stream stream)
	{
		_exportedEnum = exportedEnum;
		_sw = new(stream, Encoding.UTF8);
	}

	public void Dispose()
	{
		_sw.Dispose();
	}

	public async ValueTask DisposeAsync()
	{
		await _sw.DisposeAsync();
	}

	public Task WriteAsync() => Task.Run(() =>
	{
		_sw.Write(
@$"// Copyright Zero Games. All Rights Reserved.

// THIS FILE IS GENERATED BY ZSHARP.
// DO NOT MODIFY DIRECTLY!

#region GENERATED CODE

using ZeroGames.ZSharp.Core.UnrealEngine.Specifier;

namespace {_exportedEnum.Namespace};

{_enumAttributes}
public enum {_exportedEnum.Name} : {_exportedEnum.UnderlyingType}
{{
{_enumBody}
}}

#endregion


");
	});
	
	private string _enumAttributes
	{
		get
		{
			List<string> attrs = [ $"[System.CodeDom.Compiler.GeneratedCode(\"ZSharp\", \"{Assembly.GetExecutingAssembly().GetName().Version!.ToString(3)}\")]" ];
			if ((_exportedEnum.Flags & EExportedEnumFlags.Flags) != EExportedEnumFlags.None)
			{
				attrs.Add("[Flags]");
			}

			if (!string.IsNullOrWhiteSpace(_exportedEnum.UnrealFieldPath))
			{
				attrs.Add($"[UnrealFieldPath(\"{_exportedEnum.UnrealFieldPath}\")]");
			}
			
			return string.Join('\n', attrs);
		}
	}

	private string _enumBody
	{
		get
		{
			StringBuilder enumBody = new();
			bool isFirst = true;
			foreach (var pair in _exportedEnum.ValueMap)
			{
				if (!isFirst)
				{
					enumBody.Append('\n');
				}
				else
				{
					isFirst = false;
				}

				enumBody.Append($"\t{pair.Key} = {pair.Value},");
			}

			return enumBody.ToString();
		}
	}

	private ExportedEnum _exportedEnum;
	private StreamWriter _sw;
	
}


