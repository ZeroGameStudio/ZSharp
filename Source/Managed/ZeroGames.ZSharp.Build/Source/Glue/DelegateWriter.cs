// Copyright Zero Games. All Rights Reserved.

using System.Text;

namespace ZeroGames.ZSharp.Build.Glue;

public class DelegateWriter : IDisposable, IAsyncDisposable
{

	public DelegateWriter(ExportedAssemblyRegistry registry, ExportedDelegate exportedDelegate, Stream stream)
	{
		_registry = registry;
		_exportedDelegate = exportedDelegate;
		_sw = new(stream, Encoding.UTF8);
	}

	public void Dispose()
	{
		_sw.Dispose();
	}

	public async ValueTask DisposeAsync()
	{
		await _sw.DisposeAsync();
	}

	public Task WriteAsync() => Task.Run(() =>
	{
		string returnType = _exportedDelegate.ReturnParameter?.Type.ToString() ?? "void";
		string delegateName = _exportedDelegate.Name.Split('.')[^1];
		List<string> parameters = [];
		bool hasReturn = _exportedDelegate.ReturnParameter is not null;
		for (int32 i = 0; i < _exportedDelegate.Parameters.Count - (hasReturn ? 1 : 0); ++i)
		{
			ExportedParameter param = _exportedDelegate.Parameters[i];
			string modifier = param.IsInOut ? "ref " : param.IsOut ? "out " : string.Empty;
			parameters.Add($"{modifier}{param.Type} {param.Name}");
		}
		string parameterList = string.Join(", ", parameters);
		string delegateAttr = $"[UnrealFieldPath(\"{_exportedDelegate.UnrealFieldPath}\")]\n";
		string baseType = _exportedDelegate.IsSparse ? "UnrealMulticastSparseDelegate" : _exportedDelegate.IsMulticast ? "UnrealMulticastInlineDelegate" : "UnrealDelegate";
		string signatureDeclaration = $"public delegate {returnType} Signature({parameterList});";
		string bindMethodName = _exportedDelegate.IsMulticast ? "Add" : "Bind";
		
		string delegateDeclaration =
@$"public class {delegateName} : {baseType}, IConjugate<{delegateName}>
{{
	{signatureDeclaration}
	public static {delegateName} BuildConjugate(IntPtr unmanaged) => new(unmanaged);
	public {delegateName}() : base(typeof(Signature)){{}}
	public {delegateName}(IntPtr unmanaged) : base(typeof(Signature), unmanaged){{}}
	public UnrealObject? {bindMethodName}(Signature @delegate) => base.{bindMethodName}(@delegate);
}}";

		delegateDeclaration = delegateAttr + delegateDeclaration;
		if (_exportedDelegate.Name.Contains('.'))
		{
			string outerClassName = _exportedDelegate.Name.Split('.')[0];
			delegateDeclaration =
$@"public partial class {outerClassName}
{{
{delegateDeclaration.Indent()}
}}";
		}
		
		_sw.Write(
			@$"// Copyright Zero Games. All Rights Reserved.

// THIS FILE IS GENERATED BY ZSHARP.
// DO NOT MODIFY DIRECTLY!

#region GENERATED CODE

#nullable enable

using ZeroGames.ZSharp.Core;
using ZeroGames.ZSharp.UnrealEngine;
{_extraUsingBlock}

namespace {_exportedDelegate.Namespace};

{delegateDeclaration}

#endregion


");
	});
	
	private string _extraUsingBlock
	{
		get
		{
			List<string> relevantModules = [ "Core", "CoreUObject", "PhysicsCore", "InputCore", "Engine", "UMG", "SlateCore", "Slate" ];
			
			relevantModules.RemoveAll(module => string.IsNullOrWhiteSpace(module) || module == _exportedDelegate.Module);

			return string.Join('\n', relevantModules.Distinct().Select(module => $"using {_registry.GetModuleAssembly(module)?.Name ?? throw new InvalidOperationException($"Unmapped module {module}")}.{module};"));
		}
	}

	private ExportedAssemblyRegistry _registry;
	private ExportedDelegate _exportedDelegate;
	private StreamWriter _sw;
	
}