// Copyright Zero Games. All Rights Reserved.

using System.Reflection;

namespace ZeroGames.ZSharp.CodeDom.CSharp;

public abstract class ExportedTypeBuilderBase<TDefinition>(string namespaceName, string typeName) where TDefinition : TypeDefinitionBase
{

	public CompilationUnit Build()
	{
		CompilationUnit compilationUnit = new();
		
		compilationUnit.AddHeaderBlock(HEADER);

		string[] finalUsings =
		[
			"ZeroGames.ZSharp.Core",
			"ZeroGames.ZSharp.Core.UnrealEngine",
			"ZeroGames.ZSharp.Core.UnrealEngine.Specifier",
			"ZeroGames.ZSharp.UnrealEngine",
			.._usings
		];
		foreach (var ns in finalUsings.Distinct())
		{
			compilationUnit.AddUsing(new(ns));
		}

		compilationUnit.Namespace = new(Namespace);

		TDefinition definition = AllocateTypeDefinition();
		
		foreach (var attr in _attributeBefores)
		{
			definition.AddAttributeList(new AttributeDeclaration(attr.Name, attr.Arguments));
		}
		definition.AddAttributeList(new AttributeDeclaration("System.CodeDom.Compiler.GeneratedCode", "\"Z#\"", $"\"{Assembly.GetExecutingAssembly().GetName().Version.ToString(3)}\""));
		definition.AddAttributeList(new AttributeDeclaration("UnrealFieldPath", UnrealFieldPathSpecifierArgument));
		foreach (var attr in _attributeAfters)
		{
			definition.AddAttributeList(new AttributeDeclaration(attr.Name, attr.Arguments));
		}

		foreach (var baseType in _baseTypes)
		{
			definition.AddBaseType(baseType);
		}
		
		BuildTypeDefinition(definition);
		compilationUnit.AddType(definition);
		
		compilationUnit.AddEndBlock(END);

		return compilationUnit;
	}

	public void AddUsingNamespace(string namespaceName) => _usings.Add(namespaceName);
	public void AddBaseType(string baseType) => _baseTypes.Add(baseType);
	public void AddAttributeBefore(string name, params string[] arguments) => _attributeBefores.Add((name, arguments));
	public void AddAttributeAfter(string name, params string[] arguments) => _attributeAfters.Add((name, arguments));

	public string Namespace { get; } = namespaceName;
	public string TypeName { get; } = typeName;

	protected abstract TDefinition AllocateTypeDefinition();
	protected abstract void BuildTypeDefinition(TDefinition definition);

	protected virtual string UnrealFieldPathSpecifierArgument => "__UNREAL_FIELD_PATH";

	private const string HEADER =
@"// Copyright Zero Games. All Rights Reserved.

// THIS FILE IS GENERATED BY ZSHARP.
// DO NOT MODIFY DIRECTLY!

#region GENERATED CODE

#nullable enable
#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required
#pragma warning disable CS0628 // New protected member declared in sealed type";

	private const string END =
@"#endregion


";

	private List<string> _usings = new();
	private List<string> _baseTypes = new();
	private List<(string Name, string[] Arguments)> _attributeBefores = new();
	private List<(string Name, string[] Arguments)> _attributeAfters = new();

}


